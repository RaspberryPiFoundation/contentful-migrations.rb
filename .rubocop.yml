AllCops:
  TargetRubyVersion: 2.2


# Indent private/protected/public as deep as method definitions
AccessModifierIndentation:
  EnforcedStyle: outdent
  SupportedStyles:
    - outdent
    - indent

# Align the elements of a hash literal if they span more than one line.
AlignHash:
  # Alignment of entries using hash rocket as separator. Valid values are:
  #
  # key - left alignment of keys
  #   'a' => 2
  #   'bb' => 3
  # separator - alignment of hash rockets, keys are right aligned
  #    'a' => 2
  #   'bb' => 3
  # table - left alignment of keys, hash rockets, and values
  #   'a'  => 2
  #   'bb' => 3
  EnforcedHashRocketStyle: key
  # Alignment of entries using colon as separator. Valid values are:
  #
  # key - left alignment of keys
  #   a: 0
  #   bb: 1
  # separator - alignment of colons, keys are right aligned
  #    a: 0
  #   bb: 1
  # table - left alignment of keys and values
  #   a:  0
  #   bb: 1
  EnforcedColonStyle: key

# Allow safe assignment in conditions.
AssignmentInCondition:
  AllowSafeAssignment: true

BlockNesting:
  Max: 3

BracesAroundHashParameters:
  EnforcedStyle: no_braces
  SupportedStyles:
    - braces
    - no_braces

# Indentation of `when`.
CaseIndentation:
  EnforcedStyle: case
  SupportedStyles:
    - case
    - end
  IndentOneStep: false

# Checks formatting of special comments
CommentAnnotation:
  Keywords:
    - TODO
    - FIXME
    - OPTIMIZE
    - HACK
    - REVIEW

# Use empty lines between defs.
EmptyLineBetweenDefs:
  # If true, this parameter means that single line method definitions don't
  # need an empty line between them.
  AllowAdjacentOneLineDefs: false

Encoding:
  Enabled: true

# Align ends correctly.
Lint/EndAlignment:
  # The value `keyword` means that `end` should be aligned with the matching
  # keyword (if, while, etc.).
  # The value `variable` means that in assignments, `end` should be aligned
  # with the start of the variable on the left hand side of `=`. In all other
  # situations, `end` should still be aligned with the keyword.
  EnforcedStyleAlignWith: variable
  SupportedStylesAlignWith:
    - keyword
    - variable

# Checks use of for or each in multiline loops.
For:
  EnforcedStyle: each
  SupportedStyles:
    - for
    - each

HashSyntax:
  EnforcedStyle: ruby19
  SupportedStyles:
    - ruby19
    - hash_rockets

LambdaCall:
  EnforcedStyle: call
  SupportedStyles:
    - call
    - braces

MethodDefParentheses:
  EnforcedStyle: require_parentheses
  SupportedStyles:
    - require_parentheses
    - require_no_parentheses

MethodName:
  EnforcedStyle: snake_case
  SupportedStyles:
    - snake_case
    - camelCase

NumericLiterals:
  MinDigits: 10

# Allow safe assignment in conditions.
ParenthesesAroundCondition:
  AllowSafeAssignment: true

RedundantReturn:
  # When true allows code like `return x, y`.
  AllowMultipleReturnValues: false

Semicolon:
  # Allow ; to separate several expressions on the same line.
  AllowAsExpressionSeparator: false

TrailingCommaInLiteral:
  EnforcedStyleForMultiline: no_comma
  SupportedStylesForMultiline:
    - comma
    - no_comma

Style/TrailingCommaInArguments:
  EnforcedStyleForMultiline: no_comma
  SupportedStylesForMultiline:
    - comma
    - no_comma

# TrivialAccessors doesn't require exact name matches and doesn't allow
# predicated methods by default.
TrivialAccessors:
  ExactNameMatch: false
  AllowPredicates: false
  Whitelist:
    - to_ary
    - to_a
    - to_c
    - to_enum
    - to_h
    - to_hash
    - to_i
    - to_int
    - to_io
    - to_open
    - to_path
    - to_proc
    - to_r
    - to_regexp
    - to_str
    - to_s
    - to_sym

VariableName:
  EnforcedStyle: snake_case
  SupportedStyles:
    - snake_case
    - camelCase

WordArray:
  Enabled: False
